(function () {
'use strict';

function h (nodeType, props, ...children) {
  const flatChildren = children.reduce((acc, child) => {
    const childrenArray = Array.isArray(child) ? child : [child];
    return acc.concat(childrenArray);
  }, [])
    .map(child => {
      // normalize text node to have same structure than regular dom node (looks like easier for runtime to optimize)
      const s = typeof child;
      return s !== 'function' && s !== 'object' ? {
          nodeType: 'Text',
          children: [],
          props: {
            value: child
          },
          events: {},
          length: 0
        } : child;
    });

  if (typeof nodeType === 'function') {
    return nodeType(Object.assign({children: flatChildren}, props));
  }

  const attributes = Object.assign({}, props);
  const events = {};
  const eventKeys = Object.keys(props || {}).filter(k => k.substr(0, 2) === 'on');

  for (let ev of eventKeys) {
    events[ev.substr(2).toLowerCase()] = props[ev];
    delete attributes[ev];
  }

  return {
    nodeType,
    props: attributes,
    children: flatChildren,
    length: flatChildren.length,
    events
  };
}

function compose (first, ...fns) {
  return (...args) => fns.reduce((previous, current) => current(previous), first(...args));
}

const upsertChild = (parentNode, newChild, oldChild) => {
  return oldChild ? parentNode.replaceChild(newChild, oldChild) : parentNode.appendChild(newChild);
};

const removeAttributes = (...attributes) => (domNode) => {
  for (let attr of attributes) {
    domNode.removeAttribute(attr);
  }
  return domNode;
};

const removeEventListeners = (...listeners) => (domNode) => {
  for (let [event, listener] of listeners) {
    domNode.removeEventListener(event, listener);
  }
  return domNode;
};

const addEventListeners = (...listeners) => (domNode) => {
  for (let [event, listener] of listeners) {
    domNode.addEventListener(event, listener);
  }
  return domNode;
};

const setAttributes = (...pairs) => (domNode) => {
  const attributes = pairs.filter(p => typeof p[1] !== 'function' && typeof p[1] !== 'object');
  for (let [attr, value] of attributes) {
    domNode.setAttribute(attr, value);
  }
  return domNode;
};

const setTextNode = val => node => node.textContent = val;

const createDomNode = vnode => {
  return vnode.nodeType === 'Text' ?
    document.createTextNode(String(vnode.props.value)) :
    document.createElement(vnode.nodeType);
};

const isShallowEqual = (a, b) => {
  const aKeys = Object.keys(a);
  const bKeys = Object.keys(b);
  return aKeys.length === bKeys.length && aKeys.every((k) => a[k] === b[k]);
};

//the domNode parent of the eventual childNode represented by a virtual node.
// oldNode being the old version of the virtual node, newNode the current version
function toDom (parentDom, oldNode, newNode, domFactory) {
  let domNode;
  let garbage = null;
  if (newNode) {
    if (!oldNode || oldNode.nodeType !== newNode.nodeType) {
      domNode = domFactory(newNode);
      const diff = upsertChild(parentDom, domNode, oldNode && oldNode.dom) || null;
      garbage = oldNode && diff === oldNode.dom ? oldNode : null;
      newNode.dom = domNode;
    }
    newNode.dom = newNode.dom || oldNode.dom;
  } else if (oldNode) {
    parentDom.removeChild(oldNode.dom);
    garbage = oldNode;
  }
  return newNode ? {domNode: newNode.dom, garbage} : {garbage};
}

//return a function operating on DOM nodes based on vnode props diffing
function updateAttributes (newVNode, oldVNode) {
  const newVNodeProps = newVNode.props || {};
  const oldVNodeProps = oldVNode.props || {};
  const newNodeEvents = newVNode.events || {};
  const oldNodeEvents = oldVNode.events || {};

  if (isShallowEqual(newVNodeProps, oldVNodeProps)) {
    return () => {/* do nothing */
    };
  }

  if (newVNode.nodeType === 'Text') {
    return setTextNode(newVNode.props.value);
  }

  const newNodeKeys = Object.keys(newVNodeProps);
  const oldNodeKeys = Object.keys(oldVNodeProps);
  const toRemove = oldNodeKeys.filter(k => !newNodeKeys.includes(k));

  const pairify = holder => key => [key, holder[key]];

  return compose(
    removeEventListeners(...Object.keys(oldNodeEvents).map(pairify(oldNodeEvents))),
    removeAttributes(...toRemove),
    setAttributes(...newNodeKeys.map(pairify(newVNodeProps))),
    addEventListeners(...Object.keys(newNodeEvents).map(pairify(newNodeEvents)))
  );
}

// update a dom node and its descendant based on its virtual node representation
// oldNode being the old version of the virtual node, newNode the current version
function updateTree (parentDom, oldNode, newNode, domFactory = createDomNode) {

  let garbageCollector = [];
  const tempOldNode = oldNode ? oldNode : {length: 0, children: []};

  //1. get the actual dom element related to virtual dom diff && collect node to remove/clean
  const {domNode, garbage} = toDom(parentDom, oldNode, newNode, domFactory);

  if (garbage !== null) {
    garbageCollector.push(garbage);
  }

  //2. update attributes
  if (domNode) {
    const updateFunc = updateAttributes(newNode, tempOldNode);
    updateFunc(domNode);

    //3 recursively do the same for children
    for (let i = 0; i < Math.max(tempOldNode.length, newNode.length); i++) {
      garbageCollector = garbageCollector.concat(updateTree(domNode, tempOldNode.children[i], newNode.children[i], domFactory));
    }
  }

  return garbageCollector;
}

// if you have specific memory requirement:
// this instance will clean and reuse dom nodes
// instead of throwing them and recreating new ones
var recyclerFactory = function () {

  const pool = {};

  const recycler = {
    create(vnode){
      const p = pool[vnode.nodeType] || [];
      const t = p.shift();
      return t || createDomNode(vnode);
    },
    collect(garbage){
      for (let vnode of garbage) {
        const dom = vnode.dom;
        //todo clean dom node event listeners etc
        vnode.dom = null;
        pool[vnode.nodeType] = pool[vnode.nodeType] || [];
        pool[vnode.nodeType].push(dom);
        recycler.collect(vnode.children);
      }
    }
  };
  return recycler;
};

function itemify (string) {
  const items = [];
  const numbers = Math.ceil(Math.random() * 1000);
  console.log(numbers);
  for (let i = 0; i < numbers; i++) {
    items.push({id: i, value: string + i + ' ' + Date.now()});
  }

  return items;
}

const Item = ({item, children}) => (h( 'li', { id: item.id }, children));

const div = ({title, items = []}) => (
  h( 'div', null,
    h( 'ul', null,
      items.map(item => (h( Item, { item: item }, item.value)))
    )
  ));

let mainElement = document.getElementById('main');
console.time('set');
let oldVnode = div({items: itemify('foo')});
const main = updateTree(mainElement, null, oldVnode);
console.timeEnd('set');

const recycler = recyclerFactory();

const [b] = document.getElementsByTagName('button');
b.addEventListener('click', () => {
  console.time('update');
  const newVnode = div({items: itemify('updated at')});
  const garbage = updateTree(mainElement, oldVnode, newVnode, recycler.create);
  oldVnode = newVnode;
  console.timeEnd('update');
  recycler.collect(garbage || []);
});

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
