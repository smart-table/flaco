(function () {
'use strict';

const createTextVNode = (value) => ({
  nodeType: 'Text',
  children: [],
  props: {value}
});

function h (nodeType, props, ...children) {
  const flatChildren = children.reduce((acc, child) => {
    const childrenArray = Array.isArray(child) ? child : [child];
    return acc.concat(childrenArray);
  }, [])
    .map(child => {
      // normalize text node to have same structure than regular dom nodes
      const type = typeof child;
      return type === 'object' || type === 'function' ? child : createTextVNode(child);
    });

  if (typeof nodeType !== 'function') {//regular html/text node
    return {
      nodeType,
      props: props,
      children: flatChildren
    };
  } else {
    const fullProps = Object.assign({children: flatChildren}, props);
    const comp = nodeType(fullProps);
    return typeof comp !== 'function' ? comp : h(comp, props, ...flatChildren); //functional comp vs combinator (HOC)
  }
}

function compose (first, ...fns) {
  return (...args) => fns.reduce((previous, current) => current(previous), first(...args));
}

function curry (fn, arityLeft) {
  const arity = arityLeft || fn.length;
  return (...args) => {
    const argLength = args.length || 1;
    if (arity === argLength) {
      return fn(...args);
    } else {
      const func = (...moreArgs) => fn(...args, ...moreArgs);
      return curry(func, arity - args.length);
    }
  };
}



function tap (fn) {
  return arg => {
    fn(arg);
    return arg;
  }
}

const traverse = function * (vnode) {
  yield vnode;
  if (vnode.children) {
    return yield * traverse(vnode.children);
  }
};

const sequence = function * (max) {
  let i = 0;
  while (i < max) {
    yield i;
    i++;
  }
};

const nextTick = fn => setTimeout(fn, 0);

const pairify = holder => key => [key, holder[key]];

const isShallowEqual = (a, b) => {
  const aKeys = Object.keys(a);
  const bKeys = Object.keys(b);
  return aKeys.length === bKeys.length && aKeys.every((k) => a[k] === b[k]);
};

const noop = () => {
};

const updateDomNodeFactory = (method) => (listeners) => tap(domNode => {
  for (let pair of listeners) {
    domNode[method](...pair);
  }
});

const removeAttributes = updateDomNodeFactory('removeAttribute');
const removeEventListeners = updateDomNodeFactory('removeEventListener');
const addEventListeners = updateDomNodeFactory('addEventListener');
const setAttributes = compose(
  pairs => pairs.filter(([key, value]) => typeof value !== 'function'), //only keep primitives
  updateDomNodeFactory('setAttribute')
);

const setTextNode = val => node => node.textContent = val;

const createDomNode = vnode => {
  return vnode.nodeType !== 'Text' ?
    document.createElement(vnode.nodeType) :
    document.createTextNode(String(vnode.props.value));
};

const getEventListeners = (props) => {
  return Object.keys(props).filter(k => k.substr(0, 2) === 'on')
    .map(k => [k.substr(2).toLowerCase(), props[k]]);
};

function updateEventListeners ({props:newNodeProps}={}, {props:oldNodeProps}={}) {
  const newNodeEvents = getEventListeners(newNodeProps || {});
  const oldNodeEvents = getEventListeners(oldNodeProps || {});

  return newNodeEvents.length || oldNodeEvents.length ?
    compose(
      removeEventListeners(oldNodeEvents),
      addEventListeners(newNodeEvents)
    ) : noop;
}

function updateAttributes (newVNode, oldVNode) {
  const newVNodeProps = newVNode.props || {};
  const oldVNodeProps = oldVNode.props || {};

  if (isShallowEqual(newVNodeProps, oldVNodeProps)) {
    return noop;
  }

  if (newVNode.nodeType === 'Text') {
    return setTextNode(newVNode.props.value);
  }

  const newNodeKeys = Object.keys(newVNodeProps);
  const oldNodeKeys = Object.keys(oldVNodeProps);
  const attributesToRemove = oldNodeKeys.filter(k => !newNodeKeys.includes(k));

  return compose(
    removeAttributes(attributesToRemove),
    setAttributes(newNodeKeys.map(pairify(newVNodeProps)))
  );
}

const domFactory = createDomNode;

// apply vnode diffing to actual dom node (if new node => it will be mounted into the parent)
const domify = function updateDom (oldVnode, newVnode, parentDomNode) {
  if (!oldVnode) {//there is no previous vnode
    if (newVnode) {//new node => we insert
      newVnode.dom = parentDomNode.appendChild(domFactory(newVnode));
      newVnode.lifeCycle = 1;
      return {vnode: newVnode, garbage: null};
    } else {//else (irrelevant)
      throw new Error('unsupported operation')
    }
  } else {//there is a previous vnode
    if (!newVnode) {//we must remove the related dom node
      parentDomNode.removeChild(oldVnode.dom);
      return ({garbage: oldVnode, dom: null});
    } else if (newVnode.nodeType !== newVnode.nodeType) {//it must be replaced
      newVnode.dom = domFactory(newVnode);
      newVnode.lifeCycle = 1;
      parentDomNode.replaceChild(newVnode.dom, oldVnode.dom);
      return {garbage: oldVnode, vnode: newVnode};
    } else {// only update attributes
      newVnode.dom = oldVnode.dom;
      newVnode.lifeCycle = oldVnode.lifeCycle + 1;
      return {garbage: null, vnode: newVnode};
    }
  }
};

const render = function renderer (oldVnode, newVnode, parentDomNode) {
  'use strict';
  let onNextTick = [];
  const tempOldNode = oldVnode ? oldVnode : {length: 0, children: [], props: {}};

  //1. get the actual dom element related to virtual dom diff && collect node to remove/clean
  const {vnode, garbage} = domify(oldVnode, newVnode, parentDomNode);

  if (garbage !== null) {
    // defer cleaning lifecycle
    const toUnmount = [...traverse(garbage)]
      .filter(g => g.onUnMount !== undefined)
      .map(g => () => g.onUnMount());
    onNextTick = onNextTick.concat(toUnmount);
  }

  //2. update attributes
  if (vnode) {
    //sync
    updateAttributes(vnode, tempOldNode)(vnode.dom);

    //fast path
    if (vnode.nodeType === 'Text') {
      return onNextTick;
    }

    const childrenCount = Math.max(tempOldNode.children.length, vnode.children.length);

    if (vnode.lifeCycle === 1 && vnode.onMount) {
      onNextTick.push(() => vnode.onMount());
    }

    //async (not part of the view)
    const setListeners = updateEventListeners(vnode, tempOldNode);
    if (setListeners !== noop) {
      onNextTick.push(() => setListeners(vnode.dom));
    }

    //3 recursively do the same for children
    if (childrenCount > 0) {
      return [...sequence(childrenCount)]
        .map(i => render(tempOldNode.children[i], vnode.children[i], vnode.dom))
        .reduce((acc, b) => {
          return acc.concat(b);
        }, onNextTick);
    }
  }

  return onNextTick;
};

const mount = curry(function (comp, initProp, root) {
  const batch = render(null, comp(initProp || {}), root);
  nextTick(function () {
    while (batch.length) {
      const op = batch.shift();
      op();
    }
  });
});

function update (comp, initialVNode) {
  let oldNode = initialVNode;
  const updateFunc = (props, ...args) => {
    const mount$$1 = oldNode.dom.parentNode;
    const newNode = comp(Object.assign({}, oldNode.props, props), ...args);
    const nextBatch = render(oldNode, newNode, mount$$1);
    oldNode = newNode;
    nextTick(function () {
      while (nextBatch.length) {
        const op = nextBatch.shift();
        op();
      }
    });
  };
  return updateFunc;
}

const lifeCycleFactory = method => curry((fn, comp) => (props, ...args) => {
  const n = comp(props, ...args);
  n[method] = () => fn(n, ...args);
  return n;
});
const onMount = lifeCycleFactory('onMount');

var component = function (comp) {
  return function () {
    let updateFunc;
    const wrapperComp = (props, ...args) => {
      // wrap the function call when the component has not been mounted yet (lazy evaluation to make sure the updateFunc has been set);
      const setState = updateFunc ? updateFunc : (newState) => updateFunc(newState);
      return comp(props, setState, ...args);
    };

    return onMount((vnode) => {
      updateFunc = update(wrapperComp, vnode);
    }, wrapperComp);
  };
};

const main = document.getElementById('main');

const SpanCount = ({count}) => h( 'p', null, h( 'span', null, "Another child " ), count );

const Counter = component(({count = 0, children}, setState) => {
  return h( 'div', null,
    h( 'button', { onClick: ev => (setState({count: count + 1, children})) }, "Increment"),
    h( 'button', { onClick: ev => (setState({count: count - 1})) }, "Decrement"),
    h( SpanCount, { count: count }),
    h( 'span', null, children )
  )
});

const m = mount((initProp) => {

  const now = Date.now();

  return (h( 'div', null,
    h( Counter, { count: initProp.firstCount }, "You should see me ", now),
    h( Counter, { count: initProp.secondCount }, "You should see me too")
  ));
}, {firstCount: 4, secondCount: 8});

m(main);

//
// const mountCounter = app({
//   model: {count: 0},
//   updates: {
//     increment: (model, ...args) => ({count: model.count + 1}),
//     decrement: (model, ...args) => ({count: model.count - 1})
//   },
//   view: (model, updates) => {
//     return <div>
//       <button onClick={() => updates.increment()}>Increment</button>
//       <button onClick={() => updates.decrement()}>Decrement</button>
//       <SpanCount count={model.count}/>
//     </div>
//   }
// });
//
// mountCounter(main);

// const Counter = updatable(({counter = 0}, update) => (<div>
//   <button onClick={() => update({counter: counter + 1})}>click me</button>
//   <span>{counter}</span>
// </div>));
//
//
// const Container = () => (<div>
//   <Counter counter={5}/>
//   <Counter counter={10}/>
// </div>);
//
// render(null, Container(), main);

// const listener = ev => console.log('foo');

// const Item = updatable(({data}, update) => ((<tr>
//   <td>{data.id}</td>
//   <td>
//     <a>{data.label}</a>
//   </td>
//   <td>
//     <button onClick={() => update({data: Object.assign(data, {label: 'foo'})})}>click me</button>
//   </td>
// </tr>)));

// const div = ({items = []}) => (
//   <table>
//     <tbody>
//     {
//       items.map(item => <Item data={item}/>)
//     }
//     </tbody>
//   </table>);

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
